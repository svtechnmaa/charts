{{- if eq .Values.architecture "distribute" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}-master
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: icinga2
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ .Chart.Name }}-headless
  podManagementPolicy: {{ .Values.master.podManagementPolicy }}
  replicas: {{ include "common.replicas" ( dict "replicaCount" .Values.master.replicaCount "global" .Values.global ) }}
  revisionHistoryLimit: 10
  updateStrategy:
    type: {{ .Values.master.updateStrategy }}
    {{- if (eq "OnDelete" .Values.master.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: icinga2
  template:
    metadata:
      labels:
        {{ include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: icinga2
    spec:
      {{- if .Values.master.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.master.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAffinityPreset "component" "master" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAntiAffinityPreset "component" "master" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.master.nodeAffinityPreset.type "key" .Values.master.nodeAffinityPreset.key "values" .Values.master.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.master.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.master.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.master.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.master.securityContext.fsGroup }}
      {{- end }}
      containers:
        - name: icinga2-side-car-scanning-satellite
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.sidecar.image "global" .Values.global ) }}
          securityContext:
            runAsUser: 999
          command:
          - bash
          - -ec
          - |
            sleep 120 # DO NOT REMOVE THIS
            export POD_INDEX=${POD_NAME: -1}
            if [ $POD_INDEX != 0 ]; then
            while true
            do
              echo "Do nothing..."
              sleep 60
            done
            else
            git config --global user.name "icinga"
            git config --global user.email "icinga@localhost"
            touch /etc/icinga2/zones.d/master/zones.conf
            touch /etc/icinga2/zones.d/master/satellite.conf
            python3 /opt/SVTECH-Junos-Automation/module_utils/ICINGA2_DISCOVERY.py \
              --sts_name {{ .Release.Name }}-icinga2-satellite \
              --namespace {{ .Release.Namespace }} \
              --all_config_folder /etc/icinga2/zones.d/all_config \
              --discovery_folder /etc/icinga2/zones.d \
              --zone_prefix zone_satellite \
              --endpoint_prefix {{ .Release.Name }}-icinga2-satellite \
              --headless_service icinga2-satellite-headless \
              --master_sts_name {{ .Release.Name }}-icinga2-master \
              --master_zones_config /etc/icinga2/zones.d/master/zones.conf \
              --master_endpoints_config /etc/icinga2/zones.d/master/endpoints.conf \
              --master_constants_config /etc/icinga2/zones.d/master/constants.conf \
              --master_folder /etc/icinga2/zones.d/master \
              --master_zone_config_path /etc/icinga2/zones.d/master_zones.conf \
              --master_headless_service icinga2-headless \
              --checking_interval 60 \
              --waiting_time_after_rebalancing 300
            fi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
          volumeMounts:
          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
            {{- range .Values.global.sharedPersistenceVolume }}

            {{- if and (eq .volumeName "automation-repo-volume") (has "icinga2" .shareFor) }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- if and (eq .volumeName "icinga2-zones-volume") (has "icinga2" .shareFor) }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- end }}
          {{- end  }}
          {{- end }}
        # redis container
        {{- if .Values.global.redis.enabled }}
        - name: redis
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.master.redis.image ) }} # {{ .Values.master.redis.image.repository }}:{{ .Values.master.redis.image.tag }}
          {{- if .Values.master.redis.image.pullPolicy }}
          imagePullPolicy: {{ .Values.master.redis.image.pullPolicy }}
          {{- end}}
          {{- range $key, $value := .Values.master.redis.containerPort }}
          ports:
          - name: {{ $key }}
            containerPort: {{ $value }}
          {{- end}}
          ## ENV
          env:
          {{- range $key, $value := .Values.master.redis.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
        {{- end }}
        # icingadb container
        {{- if .Values.global.icingadb.enabled }}
        - name: icingadb
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.master.icingadb.image ) }}
          {{- if .Values.master.icingadb.pullPolicy }}
          imagePullPolicy: {{ .Values.master.icingadb.pullPolicy }}
          {{- end}}
          {{- range $key, $value := .Values.master.icingadb.containerPort }}
          ports:
          - name: {{ $key }}
            containerPort: {{ $value }}
          {{- end}}
          ## ENV
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- include "icinga2-icingadb.conf" . | indent 10 }}
          {{- range $key, $value := .Values.master.icingadb.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
          ## Config icingadb
          command:
            - /bin/bash
            - -c
            - |
              POD_INDEX=${POD_NAME: -1}
              cat > /etc/icingadb/icingadb.conf << EOF
              database:
                host: $ICINGADB_DATABASE_HOST
                port: $ICINGADB_DATABASE_PORT
                database: $ICINGADB_DATABASE_DATABASE
                user: $ICINGADB_DATABASE_USER
                password: $ICINGADB_DATABASE_PASSWORD
              redis:
                host: $ICINGADB_REDIS_HOST
                port: $ICINGADB_REDIS_PORT


              retention:
                # Number of days to RETAIN FULL HISTORICAL data. By default, historical data is retained forever.
                history-days: $RETENTION_HISTORY_DAYS
                # Number of days to retain historical data for SLA reporting. By default, it is retained forever.
              #  sla-days:

                # Map of history category to number of days to retain its data in order to
                # enable retention only for specific categories or to
                # override the number that has been configured in history-days.
                options:
                  acknowledgement: $RETENTION_OPTION_ACKNOWLEDGEMENT
                  comment: $RETENTION_OPTION_COMMENT
                  downtime: $RETENTION_OPTION_DOWNTIME
                  flapping: $RETENTION_OPTION_FLAPPING
                  notification: $RETENTION_OPTION_NOTIFICATION
                  state: $RETENTION_OPTION_STATE
              EOF
              /entrypoint
        {{- end }}
        # icinga2 container
        - name: icinga2
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.master.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.master.securityContext.runAsUser }}
          {{- end }}
          command:
          - bash
          - -ec
          - |
            function check_empty_dir {
                dir="$1"
                default_dir="$2"
                status=`ls -A $dir | grep -v 'lost+found' | grep -v '^\.st*' | wc -l`

                if [[ "$status" != "0" ]]; then
                    echo "$dir is not Empty. Take no action"
                else
                    echo "$dir is Empty. Push icinga2 default config to /etc/icinga2:"
                    rsync -avzhp  $default_dir/* $dir
                    chown icinga:icinga $dir -R && chmod 775 $dir -R
                fi
            }

            export REPO_DIR="/opt/SVTECH-Junos-Automation"
            if [ -d "$REPO_DIR" ];then
                # ADD ICINGA2s' PREBUILD CONFIG and PLUGINS by SVTECH
                rsync -azhp $REPO_DIR/icinga2-entities/plugins-* /opt/default_plugin
                rsync -azhp $REPO_DIR/module_utils /opt/default_plugin
                check_empty_dir "/etc/icinga2/zones.d/global-templates" "$REPO_DIR/icinga2-entities/configs/global-templates"
                check_empty_dir "/etc/icinga2/zones.d/master" "$REPO_DIR/icinga2-entities/configs/master"
                check_empty_dir "/etc/icinga2/scripts" "$REPO_DIR/icinga2-entities/scripts"
            fi

            check_empty_dir "/etc/icinga2/conf.d" "/opt/default_config/conf.d"
            check_empty_dir "/etc/icinga2/features-available" "/opt/default_config/features-available"
            check_empty_dir "/usr/share/icinga2/plugins/libexec" "/opt/default_plugin"

            cp --update --symbolic-link /usr/share/icinga2/plugins/libexec/plugins-pl/* /usr/share/icinga2/plugins/libexec
            chmod -R 775 /etc/icinga2/conf.d $PLUGIN_DIR
            chown -R icinga:icinga /etc/icinga2/conf.d $PLUGIN_DIR

            mkdir -p /etc/icinga2/zones.d/all_config
            chmod -R 775 /etc/icinga2/zones.d/all_config

            FULL_POD_NAME=${POD_NAME}.icinga2-headless.{{ .Release.Namespace }}
            FULL_NAME={{ .Release.Name }}-icinga2-master
            COMMON_NAME_ORIGIN=${COMMON_NAME}
            POD_INDEX=${POD_NAME: -1}
            if [ $POD_INDEX != 0 ]; then
              echo "***************** inside if ***************"
              master_pod_name=${FULL_NAME}-0.icinga2-headless.{{ .Release.Namespace }}

              export ROLE="satellite"

              export PARENT_NAME=${COMMON_NAME}
              export PARENT_ZONE=${ZONE}

              export PARENT_HOST=$master_pod_name
              export PARENT_PORT=5665
              export TRUSTEDCERT=/var/lib/icinga2/certs/trusted-parent.crt

              export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
              export ZONE="${ZONE}-${POD_INDEX}"
            else
              export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
            fi

            echo "*****************************"

            echo "$ROLE, $PARENT_NAME, $PARENT_ZONE, $COMMON_NAME, $ZONE "

            echo "******************************"


            # Init Config
            /opt/scripts/entrypoint.sh no_start

            if [ ! -e "/etc/icinga2/zones.d/master_zones.conf" ]; then
            cat <<EOF | tee /etc/icinga2/zones.d/master_zones.conf

            {{- range $index, $topping := until (int .Values.master.replicaCount ) }}
            object Endpoint "${COMMON_NAME_ORIGIN}-{{ $index }}" {
              host = "${FULL_NAME}-{{ $index }}.{{ $.Chart.Name }}-headless.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}"
              port = "5665"
            }
            {{- end }}

            object Zone "master" {
              endpoints = [
              {{- range $index, $topping := until (int .Values.master.replicaCount ) }}
              "${COMMON_NAME_ORIGIN}-{{ $index }}" ,
              {{- end }}
              ]
            }

            object Zone "global-templates" {
              global = true
            }

            object Zone "director-global" {
              global = true
            }
            EOF
            fi

            rm -rf /etc/icinga2/zones.conf
            ln -s /etc/icinga2/zones.d/master_zones.conf /etc/icinga2/zones.conf

            # cat <<EOF | tee /etc/icinga2/zones.conf
            # object Endpoint "master-0" {
            #         host = "localhost"
            # }

            # object Zone "master" {
            #         endpoints = [ "master-0" ]
            # }


            # object Zone "global-templates" {
            #         global = true
            # }

            # object Zone "director-global" {
            #         global = true
            # }

            # EOF
            

            # Check git folder
            check_git=`ls -la /etc/icinga2/zones.d | grep ".git" | wc -l`
            echo $check_git
            if [ $check_git == 0 ]; then
                cd /etc/icinga2/zones.d/ && \
                echo ".stversions" > .gitignore && \
                git init && \
                git config --global user.name icinga && \
                git config --global user.email icinga@localhost && \
                git add -A && git commit -m "init config"

                # Add curl into post-commit
            cat << 'EOF' > /etc/icinga2/zones.d/.git/hooks/post-commit
            echo 'Sleep 30s before restart, please wait'
            sleep 30
            MASTER_LIST=($(dig srv +search +short icinga2-headless |awk '{print $4}' | uniq | sed 's/.$//g'))
            for MASTER in "${MASTER_LIST[@]}"
            do
            master_index=$(cut -d'.' -f1 <<< $(echo $MASTER 2>/dev/null) | awk -F'-' '{print $NF}')
            url="https://{{ .Release.Name }}-icinga2-master-${master_index}.icinga2-headless.{{ .Release.Namespace }}:5665/v1/actions/restart-process?pretty=1"
            curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST "$url"
            done
            EOF
            fi

            # Add curl into reload
            cat << 'EOF' > /usr/bin/reload
            echo 'Sleep 30s before restart, please wait'
            sleep 30
            icinga2 daemon -C > /dev/null 2>&1
            exit_code=$?
            if [ $exit_code -eq 0 ]; then
            echo "Valid icinga2 config"
            else
            echo "WARNING: Invalid icinga2 config, resolve the problem first"
            echo "Cancle restart!!!"
            exit 1
            fi
            MASTER_LIST=($(dig srv +search +short icinga2-headless |awk '{print $4}' | uniq | sed 's/.$//g'))
            for MASTER in "${MASTER_LIST[@]}"
            do
            master_index=$(cut -d'.' -f1 <<< $(echo $MASTER 2>/dev/null) | awk -F'-' '{print $NF}')
            url="https://{{ .Release.Name }}-icinga2-master-${master_index}.icinga2-headless.{{ .Release.Namespace }}:5665/v1/actions/restart-process?pretty=1"
            curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST "$url"
            done
            EOF

            # Add script to reload satellite
            touch /usr/bin/reload-satellite
            chmod -R 775 /usr/bin/reload-satellite
            chown icinga:icinga /usr/bin/reload-satellite
            cat << 'EOF' > /usr/bin/reload-satellite
            echo 'Restarting satellite...'
            SATELLITE_LIST=($(dig srv +search +short icinga2-satellite-headless |awk '{print $4}' | uniq | sed 's/.$//g'))
            NAMESPACE=($(dig srv +search +short icinga2-headless | awk '{print $4}' | cut -d"." -f3))
            for SATELLITE in "${SATELLITE_LIST[@]}"
            do
            satellite_index=$(cut -d'.' -f1 <<< $(echo $SATELLITE 2>/dev/null) | awk -F'-' '{print $NF}')
            url="https://{{ .Release.Name }}-icinga2-satellite-${satellite_index}.icinga2-satellite-headless.${NAMESPACE}:5665/v1/actions/restart-process?pretty=1"
            curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST "$url"
            done
            EOF

            # Add script to force rebalance
            touch /usr/bin/rebalance
            chmod -R 775 /usr/bin/rebalance
            chown icinga:icinga /usr/bin/rebalance
            cat << 'EOF' > /usr/bin/rebalance
            echo 'Force rebalancing...'
            NAMESPACE=($(dig srv +search +short icinga2-headless | awk '{print $4}' | cut -d"." -f3))
            STS_NAME=($(dig srv +search +short icinga2-satellite-headless | awk '{print $4}' | cut -d"." -f1 | sed 's/-.$//' | uniq))
            python3 /opt/SVTECH-Junos-Automation/module_utils/ICINGA2_DISCOVERY.py --sts_name=${STS_NAME} --namespace=${NAMESPACE} --force_rebalance
            EOF

            if [ ! -e "/etc/icinga2/zones.d/master/${COMMON_NAME}.conf" ]; then
            cat << EOF > /etc/icinga2/zones.d/master/${COMMON_NAME}.conf
            object Host "${COMMON_NAME}" {
              import "generic-host-nms"
              check_command = "hostalive"
              address = "${FULL_POD_NAME}"
              address6 = "::1"
              vars.agent_endpoint = name
              vars.device_type = ""
              vars.os = "Linux"
              vars.http_vhosts["http"] = {
                http_uri = "/thruk"
              }
              vars.disks["disk"] = {
                /* No parameters. */
              }
              vars.notification["mail"] = {
                groups = [ "icingaadmins" ]
              }
            }
            EOF
            fi

            # truncate some config files
            truncate -s 0 /etc/icinga2/conf.d/services.conf
            truncate -s 0 /etc/icinga2/conf.d/hosts.conf

            chmod 777 /etc/icinga2/zones.d -R
            echo "Start Icinga2:"
            exec /tini -- icinga2 daemon
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TZ
              value: {{ include "common.timezone" ( dict "timezone" .Values.timezone "global" .Values.global) }}
            - name: ROLE
              value: master
            - name: COMMON_NAME
              value: master
            - name: ZONE
              value: master
            - name: ICINGA_HOST
              value: "0.0.0.0"
            - name: ICINGA_PORT
              value: "5665"
            - name: INFLUXDB_ENABLE
              value: {{ .Values.master.influxdb_connection.enable | quote }}
            {{- if .Values.master.influxdb_connection.enable }}
            - name: INFLUXDB_HOST
              value: {{ .Values.master.influxdb_connection.influxdb_host | quote }}
            - name: INFLUXDB_PORT
              value: {{ .Values.master.influxdb_connection.influxdb_port | quote}}
            - name: INFLUXDB_DATABASE
              value: {{ .Values.master.influxdb_connection.influxdb_database | quote }}
            - name: INFLUXDB_USER
              value: {{ .Values.master.influxdb_connection.influxdb_user | quote }}
            - name: INFLUXDB_PASSWORD
              value: {{ .Values.master.influxdb_connection.influxdb_password | quote }}
            {{- end }}
            {{- if .Values.master.ido_connection.enable }}
            - name: IDO_ENABLE
              value: {{ .Values.master.ido_connection.enable | quote }}
            - name: IDO_HOST
              value: {{ .Values.master.ido_connection.ido_host | quote }}
            - name: IDO_PORT
              value: {{ .Values.master.ido_connection.ido_port | quote}}
            - name: IDO_USER
              value: {{ .Values.master.ido_connection.ido_user | quote }}
            - name: IDO_PASSWORD
              value: {{ .Values.master.ido_connection.ido_password | quote }}
            - name: IDO_DATABASE
              value: {{ .Values.master.ido_connection.ido_database | quote }}
            - name: IDO_CATEGORIES
              value: {{ .Values.master.ido_connection.ido_catagories | quote}}
            - name: IDO_CLEANUP_STATEHISTORY
              value: {{ .Values.master.ido_connection.ido_cleanup_statehistory | quote }}
            - name: IDO_CLEANUP_NOTIFICAION
              value: {{ .Values.master.ido_connection.ido_cleanup_notificaion | quote }}
            - name: IDO_CLEANUP_SERVICECHECK
              value: {{ .Values.master.ido_connection.ido_cleanup_servicecheck | quote }}
            {{- end }}
            {{- if .Values.master.notifications.enable }}
            - name: NOTI_ENABLE
              value: {{ .Values.master.notifications.enable | quote }}
            - name: MAILHUB_HOST
              value: {{ .Values.master.notifications.mailhub_host | quote }}
            - name: MAILHUB_PORT
              value: {{ .Values.master.notifications.mailhub_port | quote }}
            - name: RELAY_EMAIL
              value: {{ .Values.master.notifications.relay_email | quote }}
            {{- end }}
            # Enable and config icingadb feature
            {{- if .Values.global.icingadb.enabled }}
            - name: ICINGADB_ENABLE
              value: {{ .Values.global.icingadb.enabled | quote }}
            - name: REDIS_HOST
              value: {{ .Values.global.redis.host | default "localhost" | quote }}
            - name: REDIS_PORT
              value: {{ .Values.global.redis.port | default "6379" | quote }}
            {{- end }}
          ports:
            - name: icinga2-api
              containerPort: {{ .Values.master.containerPorts.icinga2Api }}
              # protocol: TCP
            - name: livestatus
              containerPort: {{ .Values.master.containerPorts.livestatus }}
              # protocol: TCP
          {{- if .Values.master.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  icinga2 daemon -C
            initialDelaySeconds: {{ .Values.master.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.livenessProbe.failureThreshold }}
          {{- else if .Values.master.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.master.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.master.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  curl -k -s -u icingaAdmin:icingaAdmin https://localhost:5665/v1
            initialDelaySeconds: {{ .Values.master.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.readinessProbe.failureThreshold }}
          {{- else if .Values.master.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.master.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.master.resources }}
          resources: {{- toYaml .Values.master.resources | nindent 12 }}
          {{- end }}
          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
          volumeMounts:
            {{- range .Values.global.sharedPersistenceVolume }}

            {{- if has "icinga2" .shareFor }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- end }}
          {{- end }}
      {{- if .Values.init }}
      initContainers:
        - name: wait-for-init-repo
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.init.image ) }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
                until [ `ls -A /opt/SVTECH-Junos-Automation | grep 'completed' | wc -l` != 0 ];
                do
                  echo "Waiting for Init Repo...";
                  sleep 2;
                done
          volumeMounts:
          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
            {{- range .Values.global.sharedPersistenceVolume }}

            {{- if and (eq .volumeName "automation-repo-volume") (has "icinga2" .shareFor) }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- end }}
          {{- end  }}
      {{- if .Values.master.influxdb_connection.enable }}
        - name: wait-for-influxdb
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.init.image ) }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if .Values.master.influxdb_connection.influxdb_host }}
              until nc -zvw5 {{ .Values.master.influxdb_connection.influxdb_host }} 9096; do echo "Waiting for InfluxDB..."; sleep 2; done
              {{- else }}
              until nc -zvw5 influxdb-relay 9096; do echo "Waiting for InfluxDB..."; sleep 2; done
              {{- end }}
      {{- end }}

      {{- if .Values.master.ido_connection.enable }}
        - name: wait-for-mariadb
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.init.image ) }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if .Values.master.ido_connection.ido_host }}
              until nc -zvw5 {{ .Values.master.ido_connection.ido_host }} 3306; do echo "Waiting for MariaDB..."; sleep 2; done
              {{- else }}
              until nc -zvw5 mariadb 3306; do echo "Waiting for MariaDB..."; sleep 2; done
              {{- end }}
      {{- end }}

      {{- end }}

      imagePullSecrets:
      - name: ghcr-pull-secret

      {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
      volumes:
      {{- range .Values.global.sharedPersistenceVolume }}

      {{- if has "icinga2" .shareFor }}
      - name: {{ .volumeName }}
        persistentVolumeClaim:
          claimName: {{ .pvcName }}
      {{- end }}

      {{- end }}
      {{- end  }}
{{- end }}

