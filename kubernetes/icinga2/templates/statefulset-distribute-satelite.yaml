{{- if eq .Values.architecture "distribute" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: {{ .Chart.Name }}-satellite
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: {{ .Chart.Name }}-satellite
    # helm.sh/chart: icinga2-satellite-1.0.0
  name: {{ include "common.names.fullname" . }}-satellite
spec:
  # podManagementPolicy: OrderedReady
  replicas: {{ include "common.replicas" ( dict "replicaCount" .Values.satellite.replicaCount "global" .Values.global ) }}
  podManagementPolicy: {{ .Values.master.podManagementPolicy }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: {{ .Chart.Name }}-satellite
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Chart.Name }}-satellite
  serviceName: {{ .Chart.Name }}-satellite-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/component: {{ .Chart.Name }}-satellite
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: {{ .Chart.Name }}-satellite
        helm.sh/chart: {{ .Chart.Name }}-satellite-1.0.0
    spec:
      {{- if .Values.satellite.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.satellite.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAffinityPreset "component" "master" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAntiAffinityPreset "component" "master" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.master.nodeAffinityPreset.type "key" .Values.master.nodeAffinityPreset.key "values" .Values.master.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.master.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.master.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.master.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.master.securityContext.fsGroup }}
      {{- end }}
      containers:
        - name: icinga2
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.master.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.master.securityContext.runAsUser }}
          {{- end }}
          command:
          - bash
          - -ec
          - |
            function check_empty_dir {
              dir="$1"
              default_dir="$2"
              status=`ls -A $dir | grep -v 'lost+found' | grep -v '^\.st*' | wc -l`
              if [[ $status -ne 0 ]]; then
                echo "$dir is not Empty. Take no action"
              else
                echo "$dir is Empty. Copying default files from $default_dir to $dir"
                rsync -avzhp  $default_dir/* $dir
                chown icinga:icinga $dir -R && chmod 775 $dir -R
              fi
            }

            # ADD ICINGA2s' PREBUILD CONFIG and PLUGINS by SVTECH
            export REPO_DIR="/opt/SVTECH-Junos-Automation"
            if [[ -d $REPO_DIR ]];then
              echo "SVTECH-Junos-Automation repo found, copying svtech's plugins to prebuild folder (/opt/default_plugin)"
              rsync -azhp $REPO_DIR/icinga2-entities/plugins-* /opt/default_plugin
              rsync -azhp $REPO_DIR/module_utils /opt/default_plugin

              check_empty_dir "/etc/icinga2/scripts" "$REPO_DIR/icinga2-entities/scripts"
            fi

            # Check and copy default config and plugins if not present
            check_empty_dir "/etc/icinga2/conf.d" "/opt/default_config/conf.d"
            check_empty_dir "/etc/icinga2/features-available" "/opt/default_config/features-available"
            check_empty_dir "/usr/share/icinga2/plugins/libexec" "/opt/default_plugin"

            # Icinga2 Setup
            MASTER_NAME_ORIGIN={{ include "common.names.fullname" . }}-master
            SATELLITE_NAME_ORIGIN={{ include "common.names.fullname" . }}-satellite
            POD_INDEX=${POD_NAME: -1}
            ZONE_INDEX=$(($POD_INDEX/2))
            SATELLITE_ZONE_NAME=${ZONE}-${ZONE_INDEX}

            # MASTER_POD_NAME=${MASTER_NAME_ORIGIN}-0.icinga2-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            ROLE="satellite"
            PARENT_NAME=${MASTER_NAME_ORIGIN}-0
            PARENT_ZONE=${PARENT_ZONE}
            PARENT_HOST={{ .Chart.Name }}
            PARENT_PORT=5665
            TRUSTEDCERT=/var/lib/icinga2/certs/trusted-parent.crt
            COMMON_NAME=${POD_NAME}
            ZONE=${SATELLITE_ZONE_NAME}

            echo "*****************************"
            echo "ICINGA2 NODE SETUP"
            echo "role: $ROLE, endpoint: $PARENT_NAME, parent_host: $PARENT_HOST, parent_port: $PARENT_PORT, parent_zone: $PARENT_ZONE, common_name: $COMMON_NAME, zone: $ZONE, icinga2_host: $ICINGA2_HOST, icinga2_port: $ICINGA2_PORT"
            echo "*****************************"
            /opt/scripts/entrypoint.sh no_start

            # override zones.conf
            echo "OVERRIDE /etc/icinga2/zones.conf"
            cat <<EOF | tee /etc/icinga2/zones.conf
            {{- range $index, $_ := until 2 }}
            object Endpoint "${MASTER_NAME_ORIGIN}-{{ $index }}" {
            }
            {{- end }}
            object Zone "${PARENT_ZONE}" {
              endpoints = [
              {{- range $index, $_ := until 2 }}
              "${MASTER_NAME_ORIGIN}-{{ $index }}",
              {{- end }}
              ]
            }

            object Endpoint "$COMMON_NAME" {
            }

            object Zone "$SATELLITE_ZONE_NAME" {
              endpoints = [ "$COMMON_NAME" ]
              parent = "$PARENT_ZONE"
            }

            object Zone "global-templates" {
              global = true
            }

            object Zone "director-global" {
              global = true
            }
            EOF

            # Add script to reload satellite
            touch /usr/bin/reload-satellite
            chmod -R 775 /usr/bin/reload-satellite
            chown icinga:icinga /usr/bin/reload-satellite
            cat << 'EOF' > /usr/bin/reload-satellite
            echo 'Restarting satellite...'
            SATELLITE_LIST=$(dig srv +search +short icinga2-satellite-headless |awk '{print $4}' | uniq | sed 's/.$//g')
            NAMESPACE=($(dig srv +search +short icinga2-headless | awk '{print $4}' | cut -d"." -f3))
            for SATELLITE in ${SATELLITE_LIST}
            do
            satellite_index=$(echo "$SATELLITE" | cut -d'.' -f1  | awk -F'-' '{print $NF}')
            url="https://{{ .Release.Name }}-icinga2-satellite-${satellite_index}.icinga2-satellite-headless.${NAMESPACE}:5665/v1/actions/restart-process?pretty=1"
            curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST "$url"
            done
            EOF

            # Disable some features
            icinga2 feature disable command icingadb ido-mysql influxdb livestatus notification syslog
            # Start icinga2 with tini
            echo "Start Icinga2:"
            exec /tini -- icinga2 daemon
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TZ
              value: {{ include "common.timezone" ( dict "timezone" .Values.timezone "global" .Values.global) }}
            - name: ROLE
              value: satellite
            - name: COMMON_NAME
              value: satellite
            - name: ZONE
              value: zone-satellite
            - name: PARENT_ZONE
              value: master
            {{- if .Values.master.ticketsalt }}
            - name: TICKET_SALT
              valueFrom:
                secretKeyRef:
                  name: ticketsalt-secret
                  key: ticketsalt
            {{- end }}
          ports:
            - name: icinga2-api
              containerPort: {{ .Values.master.containerPorts.icinga2Api }}
              # protocol: TCP
            - name: livestatus
              containerPort: {{ .Values.master.containerPorts.livestatus }}
              # protocol: TCP
          {{- if .Values.master.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  icinga2 daemon -C
            initialDelaySeconds: {{ .Values.master.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.livenessProbe.failureThreshold }}
          {{- else if .Values.master.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.master.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.master.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  curl -k -s -u icingaAdmin:icingaAdmin https://localhost:5665/v1
            initialDelaySeconds: {{ .Values.master.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.readinessProbe.failureThreshold }}
          {{- else if .Values.master.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.master.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.master.resources }}
          resources: {{- toYaml .Values.master.resources | nindent 12 }}
          {{- end }}
          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
          volumeMounts:
            {{- range .Values.global.sharedPersistenceVolume }}

            {{- if has "icinga2-satellite" .shareFor }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- end }}
          {{- end }}
      imagePullSecrets:
      - name: ghcr-pull-secret
      {{- if .Values.init }}
      initContainers:
        - name: wait-icinga2-master
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.init.image ) }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
              until nc -zvw5 {{ .Chart.Name }} 5665;
              do
                echo "Waiting for Icinga2 master...";
                sleep 2;
              done
      {{- end }}

      {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
      volumes:
      {{- range .Values.global.sharedPersistenceVolume }}

      {{- if has "icinga2-satellite" .shareFor }}
      - name: {{ .volumeName }}
        persistentVolumeClaim:
          claimName: {{ .pvcName }}
      {{- end }}

      {{- end }}
      {{- end  }}
{{- end }}
