
{{- if eq .Values.architecture "disabled" }}


{{- if eq .Values.architecture "distribute" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: icinga2
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ .Chart.Name }}-headless
  podManagementPolicy: {{ .Values.master.podManagementPolicy }}
  replicas: {{ .Values.master.replicaCount }}
  updateStrategy:
    type: {{ .Values.master.updateStrategy }}
    {{- if (eq "OnDelete" .Values.master.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: icinga2
  template:
    metadata:
      labels:
        {{ include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: icinga2
    spec:
      {{- if .Values.master.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.master.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAffinityPreset "component" "master" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.master.podAntiAffinityPreset "component" "master" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.master.nodeAffinityPreset.type "key" .Values.master.nodeAffinityPreset.key "values" .Values.master.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.master.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.master.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.master.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.master.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.master.securityContext.fsGroup }}
      {{- end }}

      {{- if .Values.init }}
      initContainers:
        - name: wait-for-init-repo
          image: {{ include "rundeck.init.image" . }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
                until [ `ls -A /opt/SVTECH-Junos-Automation | grep 'completed' | wc -l` != 0 ];
                do
                  echo "Waiting for Init Repo...";
                  sleep 2;
                done
          volumeMounts:
          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
            {{- range .Values.global.sharedPersistenceVolume }}

            {{- if and (eq .volumeName "automation-repo-volume") (has "icinga2" .shareFor) }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- end }}
          {{- end  }}
      {{- if .Values.master.influxdb_connection.enable }}
        - name: wait-for-influxdb
          image: {{ include "icinga2.init.image" . }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if .Values.master.influxdb_connection.influxdb_host }}
              until nc -zvw5 {{ .Values.master.influxdb_connection.influxdb_host }} 9096; do echo "Waiting for InfluxDB..."; sleep 2; done
              {{- else }}
              until nc -zvw5 influxdb-relay 9096; do echo "Waiting for InfluxDB..."; sleep 2; done
              {{- end }}
      {{- end }}

      {{- if .Values.master.ido_connection.enable }}
        - name: wait-for-mariadb
          image: {{ include "icinga2.init.image" . }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if .Values.master.ido_connection.ido_host }}
              until nc -zvw5 {{ .Values.master.ido_connection.ido_host }} 3306; do echo "Waiting for MariaDB..."; sleep 2; done
              {{- else }}
              until nc -zvw5 mariadb 3306; do echo "Waiting for MariaDB..."; sleep 2; done
              {{- end }}
      {{- end }}

      {{- end }}

      containers:
        - name: icinga2
          image: {{ template "icinga2.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.master.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.master.securityContext.runAsUser }}
          {{- end }}
          command:
            - bash
            - -ec
            - |
                function check_empty_dir {
                    dir="$1"
                    default_dir="$2"
                    status=`ls -A $dir | grep -v 'lost+found' | grep -v '^\.st*' | wc -l`

                    if [[ "$status" != "0" ]]; then
                        echo "$dir is not Empty. Take no action"
                    else
                        echo "$dir is Empty. Push icinga2 default config to /etc/icinga2:"
                        rsync -avzhp  $default_dir/* $dir
                        chown icinga:icinga $dir -R && chmod 775 $dir -R
                    fi
                }
                export REPO_DIR="/opt/SVTECH-Junos-Automation"

                if [ -d "$REPO_DIR" ];then
                    # ADD ICINGA2s' PREBUILD CONFIG and PLUGINS by SVTECH
                    rsync -azhp $REPO_DIR/icinga2-entities/plugins-* /opt/default_plugin
                    rsync -azhp $REPO_DIR/module_utils /opt/default_plugin
                    check_empty_dir "/etc/icinga2/zones.d/global-templates" "$REPO_DIR/icinga2-entities/configs/global-templates"
                    check_empty_dir "/etc/icinga2/zones.d/master" "$REPO_DIR/icinga2-entities/configs/master"
                    check_empty_dir "/etc/icinga2/scripts" "$REPO_DIR/icinga2-entities/scripts"
                fi

                check_empty_dir "/etc/icinga2/conf.d" "/opt/default_config/conf.d"
                check_empty_dir "/etc/icinga2/features-available" "/opt/default_config/features-available"
                check_empty_dir "/usr/share/icinga2/plugins/libexec" "/opt/default_plugin"

                cp --update --remove-destination --symbolic-link /usr/share/icinga2/plugins/libexec/plugins-pl/* /usr/share/icinga2/plugins/libexec

                chmod -R 775 /etc/icinga2/conf.d $PLUGIN_DIR
                chown -R icinga:icinga /etc/icinga2/conf.d $PLUGIN_DIR

                FULL_POD_NAME=${POD_NAME}.{{ .Chart.Name }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
                FULL_NAME={{ template "common.names.fullname" . }}
                COMMON_NAME_ORIGIN=${COMMON_NAME}
                POD_INDEX=${POD_NAME: -1}
                if [ $POD_INDEX != 0 ]; then

                  master_pod_name=${FULL_NAME}-0.{{ .Chart.Name }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}

                  export ROLE="satellite"

                  export PARENT_NAME=${COMMON_NAME}
                  export PARENT_ZONE=${ZONE}

                  export PARENT_HOST=$master_pod_name
                  export PARENT_PORT=5665
                  export TRUSTEDCERT=/var/lib/icinga2/certs/trusted-parent.crt

                  export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
                  export ZONE="${ZONE}-${POD_INDEX}"
                else
                  export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
                fi

                # Init Config
                /opt/scripts/entrypoint.sh no_start

                cat <<EOF | tee /etc/icinga2/zones.conf

                {{- range $index, $topping := until (int .Values.master.replicaCount ) }}
                object Endpoint "${COMMON_NAME_ORIGIN}-{{ $index }}" {
                  host = "${FULL_NAME}-{{ $index }}.{{ $.Chart.Name }}-headless.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}"
                  port = "5665"
                }
                {{- end }}

                object Zone "master" {
                  endpoints = [
                  {{- range $index, $topping := until (int .Values.master.replicaCount ) }}
                  "${COMMON_NAME_ORIGIN}-{{ $index }}" ,
                  {{- end }}
                  ]
                }

                object Zone "global-templates" {
                  global = true
                }

                object Zone "director-global" {
                  global = true
                }

                const Zones = [ "master" ]
                EOF

                # Check git folder
                check_git=`ls -la /etc/icinga2/zones.d | grep ".git" | wc -l`
                echo $check_git
                if [ $check_git == 0 ]; then
                    cd /etc/icinga2/zones.d/ && \
                    git init && \
                    git config --global user.name icinga && \
                    git config --global user.email icinga@localhost && \
                    git add -A && git commit -m "init config"

                    # Add curl into post-commit                     
                    {{- range $index, $topping := until (int .Values.master.replicaCount ) }}
                    echo "curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST 'https://${FULL_NAME}-{{ $index }}.{{ $.Chart.Name }}-headless.{{ $.Release.Namespace }}.svc.{{ $.Values.clusterDomain }}:5665/v1/actions/restart-process?pretty=1'" >> /etc/icinga2/zones.d/.git/hooks/post-commit
                    {{- end }}

                fi

                # Add curl into reload
                cat /etc/icinga2/zones.d/.git/hooks/post-commit > /usr/bin/reload

                if [ ! -e "/etc/icinga2/zones.d/master/${COMMON_NAME}.conf" ]; then
                cat << EOF > /etc/icinga2/zones.d/master/${COMMON_NAME}.conf
                object Host "${COMMON_NAME}" {
                  import "generic-host-nms"
                  check_command = "hostalive"
                  address = "${FULL_POD_NAME}"
                  address6 = "::1"
                  vars.agent_endpoint = name
                  vars.device_type = ""
                  vars.os = "Linux"
                  vars.http_vhosts["http"] = {
                    http_uri = "/thruk"
                  }
                  vars.disks["disk"] = {
                    /* No parameters. */
                  }
                  vars.notification["mail"] = {
                    groups = [ "icingaadmins" ]
                  }
                }
                EOF
                fi

                # truncate some config files
                truncate -s 0 /etc/icinga2/conf.d/services.conf
                truncate -s 0 /etc/icinga2/conf.d/hosts.conf

                chmod 777 /etc/icinga2/zones.d -R

                # enable & config icingadb feautre
                icinga2 feature enable icingadb
                # echo 'library "icingadb"' > /etc/icinga2/features-enabled/icingadb.conf
                # echo 'object IcingaDB "icingadb" {' >>/etc/icinga2/features-enabled/icingadb.conf
                # echo '  host = "icinga-stack-redis.test-icinga-helm"' >>/etc/icinga2/features-enabled/icingadb.conf
                # echo '  port = 6379' >>/etc/icinga2/features-enabled/icingadb.conf
                # echo '}' >>/etc/icinga2/features-enabled/icingadb.conf
                cat > /etc/icinga2/features-enabled/icingadb.conf << EOF
                library "icingadb"

                object IcingaDB "icingadb" {
                    host = "icinga-stack-redis.test-icinga-helm"
                    port = 6379
                }
                EOF

                echo "Start Icinga2:"
                exec /tini -- icinga2 daemon

          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TZ
              value: {{ include "common.timezone" ( dict "timezone" .Values.timezone "global" .Values.global) }}
            - name: ROLE
              value: "master"
            - name: COMMON_NAME
              value: "master"
            - name: ZONE
              value: "master"
            - name: ICINGA_HOST
              value: "0.0.0.0"
            - name: ICINGA_PORT
              value: "5665"
            - name: INFLUXDB_ENABLE
              value: {{ .Values.master.influxdb_connection.enable | quote }}
            {{- if .Values.master.influxdb_connection.enable }}
            - name: INFLUXDB_HOST
              value: {{ .Values.master.influxdb_connection.influxdb_host | quote }}
            - name: INFLUXDB_PORT
              value: {{ .Values.master.influxdb_connection.influxdb_port | quote}}
            - name: INFLUXDB_DATABASE
              value: {{ .Values.master.influxdb_connection.influxdb_database | quote }}
            - name: INFLUXDB_USER
              value: {{ .Values.master.influxdb_connection.influxdb_user | quote }}
            - name: INFLUXDB_PASSWORD
              value: {{ .Values.master.influxdb_connection.influxdb_password | quote }}
            {{- end }}

            {{- if .Values.master.ido_connection.enable }}
            - name: IDO_ENABLE
              value: {{ .Values.master.ido_connection.enable | quote }}
            - name: IDO_HOST
              value: {{ .Values.master.ido_connection.ido_host | quote }}
            - name: IDO_PORT
              value: {{ .Values.master.ido_connection.ido_port | quote}}
            - name: IDO_USER
              value: {{ .Values.master.ido_connection.ido_user | quote }}
            - name: IDO_PASSWORD
              value: {{ .Values.master.ido_connection.ido_password | quote }}
            - name: IDO_DATABASE
              value: {{ .Values.master.ido_connection.ido_database | quote }}
            - name: IDO_CATEGORIES
              value: {{ .Values.master.ido_connection.ido_catagories | quote}}
            - name: IDO_CLEANUP_STATEHISTORY
              value: {{ .Values.master.ido_connection.ido_cleanup_statehistory | quote }}
            - name: IDO_CLEANUP_NOTIFICAION
              value: {{ .Values.master.ido_connection.ido_cleanup_notificaion | quote }}
            - name: IDO_CLEANUP_SERVICECHECK
              value: {{ .Values.master.ido_connection.ido_cleanup_servicecheck | quote }}
            {{- end }}

            {{- if .Values.master.notifications.enable }}
            - name: NOTI_ENABLE
              value: {{ .Values.master.notifications.enable | quote }}
            - name: MAILHUB_HOST
              value: {{ .Values.master.notifications.mailhub_host | quote }}
            - name: MAILHUB_PORT
              value: {{ .Values.master.notifications.mailhub_port | quote }}
            - name: RELAY_EMAIL
              value: {{ .Values.master.notifications.relay_email | quote }}
            {{- end }}

          ports:
            - name: icinga2-api
              containerPort: {{ .Values.master.containerPorts.icinga2Api }}
              # protocol: TCP
            - name: livestatus
              containerPort: {{ .Values.master.containerPorts.livestatus }}
              # protocol: TCP
          {{- if .Values.master.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  icinga2 daemon -C
            initialDelaySeconds: {{ .Values.master.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.livenessProbe.failureThreshold }}
          {{- else if .Values.master.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.master.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.master.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  curl -k -s -u icingaAdmin:icingaAdmin https://localhost:5665/v1
            initialDelaySeconds: {{ .Values.master.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.master.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.master.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.master.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.master.readinessProbe.failureThreshold }}
          {{- else if .Values.master.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.master.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.master.resources }}
          resources: {{- toYaml .Values.master.resources | nindent 12 }}
          {{- end }}

      {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
          volumeMounts:
            {{- range .Values.global.sharedPersistenceVolume }}

            {{- if has "icinga2" .shareFor }}
            - name: {{ .volumeName }}
              mountPath: {{ .path }}
            {{- end }}

            {{- end }}

      volumes:
        {{- range .Values.global.sharedPersistenceVolume }}

        {{- if has "icinga2" .shareFor }}
        - name: {{ .volumeName }}
          persistentVolumeClaim:
            claimName: {{ .pvcName }}
        {{- end }}

        {{- end }}


      {{- end  }}



{{- end }}


{{- end }}
