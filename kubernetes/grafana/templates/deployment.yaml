apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: grafana
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ include "common.replicas" ( dict "replicaCount" .Values.replicaCount "global" .Values.global ) }}
  strategy:
    type: {{ .Values.updateStrategy }}
    {{- if (eq "Recreate" .Values.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: grafana
    spec:
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}

      {{- if .Values.init }}
      initContainers:
        - name: wait-for-mariadb
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.init.image ) }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          command:
            - /bin/sh
            - -c
            - |
              {{- if .Values.grafanaConfig.mysqlHost }}
              until nc -zvw5 {{ .Values.grafanaConfig.mysqlHost }} 3306; do echo "Waiting for MariaDB..."; sleep 2; done
              {{- else }}
              until nc -zvw5 mariadb 3306; do echo "Waiting for MariaDB..."; sleep 2; done
              {{- end }}
      {{- end }}

      containers:
        - name: grafana
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
          {{- end }}

          env:
            - name: GF_DATABASE_TYPE
              value: mysql
            - name: GF_DATABASE_HOST
              value: {{ .Values.grafanaConfig.mysqlHost | quote }}
            - name: GF_DATABASE_PORT
              value: {{ .Values.grafanaConfig.mysqlPort | quote }}
            - name: GF_DATABASE_NAME
            {{- if index (index .Values.global "mariadb-galera") "enabled" }}
              value: {{ .Values.grafanaConfig.mysqlDB | quote }}
            {{- else }}
              value: "{{ .Release.Namespace }}_{{ .Values.grafanaConfig.mysqlDB }}"
            {{- end }}
            - name: GF_DATABASE_USER
              value: {{ .Values.grafanaConfig.mysqlUser | quote }}
            - name: GF_DATABASE_PASSWORD
              value: {{ .Values.grafanaConfig.mysqlPassword | quote }}
            - name: GF_SECURITY_ADMIN_USER
              value: {{ include "admin.user" . }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ include "admin.password" . }}
            - name: GF_SECURITY_ANGULAR_SUPPORT_ENABLED
              value: "true"
            - name: TZ
              value: {{ include "common.timezone" ( dict "timezone" .Values.timezone "global" .Values.global) }}
            - name: GF_INSTALL_PLUGINS
              value: briangann-datatable-panel,sni-thruk-datasource,yesoreyeram-infinity-datasource,grafana-clickhouse-datasource,netsage-sankey-panel,retrodaredevil-wildgraphql-datasource,marcusolsson-dynamictext-panel,volkovlabs-echarts-panel,volkovlabs-table-panel,volkovlabs-form-panel,volkovlabs-links-panel,volkovlabs-variable-panel,marcusolsson-static-datasource
            - name: GF_SERVER_ROOT_URL
              value: "https://{{ .Values.global.frontendVip }}/grafana"
            - name: GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS
              value: icinga2-report-datasource,icinga2-report-panel,icinga2-report-panel-transposed,mahendrapaipuri-dashboardreporter-app
            - name: GF_LOG_FILTERS
              value: rendering:debug plugin.mahendrapaipuri-dashboardreporter-app:debug
            - name: GF_FEATURE_TOGGLES_ENABLE
              value: accessControlOnCall,idForwarding
            - name: GF_REPORTER_PLUGIN_APP_URL
              value: http://grafana:3000/grafana/
            - name: GF_RENDERING_SERVER_URL
              value: http://renderer:8081/render
            - name: GF_REPORTER_PLUGIN_REMOTE_CHROME_URL
              value: http://chrome:9222
            - name: GF_RENDERING_CALLBACK_URL
              value: http://grafana:3000/grafana/
            - name: GF_REPORTER_PLUGIN_SKIP_TLS_CHECK
              value: "true"
            - name: GF_REPORTER_PLUGIN_NATIVE_RENDERER
              value: "false"
            - name: GF_REPORTER_PLUGIN_REPORT_ORIENTATION
              value: landscape
            - name: GF_REPORTER_PLUGIN_REPORT_LAYOUT
              value: grid
            - name: GF_REPORTER_PLUGIN_REPORT_DASHBOARD_MODE
              value: full
          ports:
            - name: grafana
              containerPort: 3000
        - args:
          - --ignore-certificate-errors
          - --disable-gpu
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.chrome.image ) }}
          imagePullPolicy: {{ .Values.chrome.image.pullPolicy | quote }}
          name: chrome
          ports:
          - containerPort: {{ .Values.chrome.service.port }}
            protocol: TCP
            name: chrome
          volumeMounts:
          - mountPath: /dev/shm
            name: shm
        - env:
          - name: IGNORE_HTTPS_ERRORS
            value: "true"
          - name: RENDERING_MODE
            value: clustered
          - name: RENDERING_CLUSTERING_MODE
            value: browser
          - name: RENDERING_CLUSTERING_MAX_CONCURRENCY
            value: "15"
          - name: RENDERING_CLUSTERING_TIMEOUT
            value: "120"
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.renderer.image ) }}
          imagePullPolicy: {{ .Values.renderer.image.pullPolicy | quote }}
          name: renderer
          ports:
          - containerPort: {{ .Values.renderer.service.port }}
            name: renderer
            protocol: TCP
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 2Gi
        name: shm
      imagePullSecrets:
      - name: ghcr-pull-secret
