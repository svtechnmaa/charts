apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: icingaweb
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ include "common.replicas" ( dict "replicaCount" .Values.replicaCount "global" .Values.global ) }}
  strategy:
    type: {{ .Values.updateStrategy }}
    {{- if (eq "Recreate" .Values.updateStrategy) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: icingaweb
  template:
    metadata:
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: icingaweb
    spec:
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.init }}
      # Init contaiter: change own for icingaweb config directory and waiting for icinga master
      initContainers:
      - name: icingaweb-init
        image: {{ include "common.images.image" ( dict "imageRoot" .Values.init.image ) }} # {{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}
        imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /data/etc/icingaweb2/enabledModules
            mkdir -p /data/var/lib/icingaweb2
            mkdir -p /data/etc/icingaweb2/modules/grafana
            # Create default navigations
            if [ ! -d /data/etc/icingaweb2/navigation ]; then
              mkdir -p /data/etc/icingaweb2/navigation
              cat > /data/etc/icingaweb2/navigation/menu.ini << EOF
            [NMAA]
            type = "menu-item"
            target = "_main"
            groups = "*"
            owner = "icingaweb"
            users = "*"

            [Hosts]
            type = "menu-item"
            parent = "NMAA"
            target = "_main"
            url = "icingadb/hosts?columns=host.name,host.address,host.state.last_update,host.state.check_source,host.state.output&sort=host.state.last_update%20desc"
            owner = "icingaweb"

            [Services]
            type = "menu-item"
            parent = "NMAA"
            target = "_main"
            url = "icingadb/services?columns=host.name,service.name,service.state.hard_state,service.state.last_update,service.state.check_source,service.state.output&sort=service.state.last_update%20desc"
            owner = "icingaweb"
            EOF
            fi
            chown -R www-data:www-data /data
            until nc -zvw5 {{ .Release.Name }}-icinga2-master-0.icinga2-headless 5665; do echo "Waiting for icinga master..."; sleep 2; done
        {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
        volumeMounts:
          {{- range .Values.global.sharedPersistenceVolume }}
          {{- if has "icingaweb" .shareFor }}
          - name: {{ .volumeName }}
            mountPath: {{ .path }}
          {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      imagePullSecrets:
      - name: ghcr-pull-secret
      containers:
      # icingaweb container
      - name: icingaweb
        image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }} # {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
        {{- end }}
        {{- range $key, $value := .Values.containerPort }}
        ports:
        - name: {{ $key }}
          containerPort: {{ $value }}
        {{- end}}
        ## ENV
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: icingaweb.enabledModules
          value: {{ include "icingaweb2.enabledModules" . }}
        {{- include "icingaweb.conf" . | indent 8 }}
        {{- include "icingaweb.resources" . | indent 8 }}
      # Volume and volumeMount
        volumeMounts:
          # icingaweb http config
          - name: icingaweb-http
            mountPath: /etc/apache2/conf-enabled/icingaweb2.conf
            subPath: icingaweb2.conf
          # icingaweb graphs
          - name: icingaweb-graphs
            mountPath: /data/etc/icingaweb2/modules/grafana/graphs.ini
            subPath: graphs.ini
          # shareVolume
          {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
          {{- range .Values.global.sharedPersistenceVolume }}
          {{- if has "icingaweb" .shareFor }}
          - name: {{ .volumeName }}
            mountPath: {{ .path }}
          {{- end }}
          {{- end }}
          {{- end }}
      # director module container
      {{- if .Values.modules.director.enabled }}
      - name: director
        image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global ) }} # {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ## ENV
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        - name: icingaweb.enabledModules
          value: {{ include "icingaweb2.enabledModules" . }}
        {{- include "icingaweb.conf" . | indent 8 }}
        {{- include "icingaweb.resources" . | indent 8 }}
        command: []
        args:
          - /bin/bash
          - -ce
          - |
            icingacli director migration run
            (icingacli director kickstart required && icingacli director kickstart run && icingacli director config deploy) || true
            icingacli director daemon run
      {{- end }}
      volumes:
        # icingaweb http 
        - name: icingaweb-http
          configMap:
            name: icingaweb-http
        # icingaweb graphs
        - name: icingaweb-graphs
          configMap:
            name: icingaweb-graphs
        # shareVome
        {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
        {{- range .Values.global.sharedPersistenceVolume }}
        {{- if has "icingaweb" .shareFor }}
        - name: {{ .volumeName }}
          persistentVolumeClaim:
            claimName: {{ .pvcName }}
        {{- end }}
        {{- end }}
        {{- end }}
