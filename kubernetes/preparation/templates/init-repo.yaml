apiVersion: batch/v1
kind: Job
metadata:
  name: "init-repo"
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}

spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: init-repo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:        
        - sh        
        - -c        
        - |
            list_repo=$(echo $REPO_LIST | tr "," " ")
            for REPO in $list_repo; do
                echo "repo: $REPO"
                name=`echo $REPO | cut -d"/" -f3`
                mkdir -p /opt/$REPO
                cd /opt/$REPO
                status=`ls -A /opt/$REPO | grep "completed" | wc -l`

                if [[ "$status" == "1" ]]; then
                    echo "/opt/$REPO is not Empty. Ignore"
                else
                    cp -r /tmp/$REPO /opt
                    if [ $? == 0 ]; then
                        echo "Move repo $REPO done !"
                        cd /opt/$REPO
                        echo "true" > completed``
                    fi
                fi
            done

        env:
          - name: REPO_LIST
            value: {{ .Values.repoList | quote }}

      {{- if and .Values.global.sharedPersistenceVolume .Values.global.sharedVolume.enabled }}
        volumeMounts:
          {{- range .Values.global.sharedPersistenceVolume }}

          {{- if has "preparation" .shareFor }}
          - name: {{ .volumeName }}
            mountPath: {{ .path }}
          {{- end }}

          {{- end }}

      imagePullSecrets:
        - name: ghcr-pull-secret

      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}  

      volumes:
        {{- range .Values.global.sharedPersistenceVolume }}

        {{- if has "preparation" .shareFor }}
        - name: {{ .volumeName }}
          persistentVolumeClaim:
            claimName: {{ .pvcName }}
        {{- end }}

        {{- end }}


      {{- end  }}